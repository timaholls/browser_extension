#!/usr/bin/env python3
import os
import signal
import subprocess
import shutil
import hashlib
import hmac
import logging
import time
import requests
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

APP = FastAPI(title="Auto Proxy Connector Helper", version="1.0.0")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
APP.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
@APP.middleware("http")
async def license_check_middleware(request: Request, call_next):
    # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    excluded_paths = ["/health", "/license/status", "/docs", "/openapi.json"]
    
    if request.url.path not in excluded_paths:
        if not license_status["valid"]:
            return JSONResponse(
                status_code=402,  # Payment Required
                content={
                    "error": "–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞",
                    "detail": license_status.get("error", "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"),
                    "license_status": license_status
                }
            )
    
    response = await call_next(request)
    return response

BASE_DIR = Path.home() / ".config" / "apc_helper"
BASE_DIR.mkdir(parents=True, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE = BASE_DIR / "server.log"

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger("apc_server")
logger.setLevel(logging.INFO)

# –§–∞–π–ª–æ–≤—ã–π handler
file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
file_handler.setLevel(logging.INFO)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(console_handler)

logger.info("=" * 80)
logger.info("üöÄ AUTO PROXY CONNECTOR SERVER STARTED")
logger.info("=" * 80)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –ª–∏—Ü–µ–Ω–∑–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º)
SECRET_KEY = "apc_proxy_connector_secret_2025"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö tinyproxy –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –ø–æ—Ä—Ç–∞–º
active_processes: Dict[int, subprocess.Popen] = {}

# –£–±—Ä–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
license_status = {
    "valid": False,
    "client_id": None,
    "expire_date": None,
    "days_remaining": 0
}


# ==================== –°–ò–°–¢–ï–ú–ê –õ–ò–¶–ï–ù–ó–ò–†–û–í–ê–ù–ò–Ø ====================

def generate_signature(client_id: str, expire_date: str, secret: str = SECRET_KEY) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    data = f"{client_id}:{expire_date}"
    signature = hmac.new(secret.encode(), data.encode(), hashlib.sha256).hexdigest()[:16]
    return signature


def generate_license_key(client_id: str, days: int = 30) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
    expire_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")
    signature = generate_signature(client_id, expire_date)
    license_key = f"{client_id}:{expire_date}:{signature}"
    return license_key


def verify_license_key(license_key: str) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á"""
    try:
        parts = license_key.strip().split(":")
        if len(parts) != 3:
            return {"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏"}
        
        client_id, expire_date, signature = parts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        expected_signature = generate_signature(client_id, expire_date)
        if signature != expected_signature:
            return {"valid": False, "error": "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ª–∏—Ü–µ–Ω–∑–∏–∏"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        expire_dt = datetime.strptime(expire_date, "%Y-%m-%d")
        now = datetime.now()
        
        if now > expire_dt:
            days_expired = (now - expire_dt).days
            return {
                "valid": False, 
                "error": f"–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞ {days_expired} –¥–Ω–µ–π –Ω–∞–∑–∞–¥",
                "client_id": client_id,
                "expire_date": expire_date,
                "days_remaining": -days_expired
            }
        
        days_remaining = (expire_dt - now).days
        
        return {
            "valid": True,
            "client_id": client_id,
            "expire_date": expire_date,
            "days_remaining": days_remaining
        }
    
    except Exception as e:
        return {"valid": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {str(e)}"}


def load_license() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    license_file = Path("license.key")
    
    if not license_file.exists():
        return {"valid": False, "error": "–§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    try:
        license_key = license_file.read_text().strip()
        return verify_license_key(license_key)
    except Exception as e:
        return {"valid": False, "error": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {str(e)}"}


def save_license(license_key: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–∞–π–ª"""
    license_file = Path("license.key")
    try:
        license_file.write_text(license_key)
        print(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {license_file}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return False


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
license_info = load_license()
license_status.update(license_info)

if license_status["valid"]:
    logger.info(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
    logger.info(f"   –ö–ª–∏–µ–Ω—Ç: {license_status['client_id']}")
    logger.info(f"   –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {license_status['expire_date']}")
    logger.info(f"   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {license_status['days_remaining']}")
else:
    logger.warning(f"‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {license_status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    logger.warning(f"‚ö†Ô∏è  –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢ –í –û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ú –†–ï–ñ–ò–ú–ï")

# ==================== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –õ–ò–¶–ï–ù–ó–ò–†–û–í–ê–ù–ò–Ø ====================


class ApplyPayload(BaseModel):
    ip: str
    port: int
    username: str
    password: str
    listen_port: int = Field(3128, description="Local HTTP proxy port")
    user_type: str = Field("user", description="User type: 'admin' or 'user'")
    profile_id: Optional[str] = Field(None, description="Unique profile identifier")


def write_config(payload: ApplyPayload) -> None:
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä—Ç–∞
    cfg_path = BASE_DIR / f"tinyproxy_{payload.listen_port}.cfg"
    pid_path = BASE_DIR / f"tinyproxy_{payload.listen_port}.pid"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tinyproxy
    cfg = f"""Port {payload.listen_port}
Listen 0.0.0.0
Timeout 30
DefaultErrorFile "/usr/share/ /default.html"
Logfile "{BASE_DIR}/tinyproxy_{payload.listen_port}.log"
LogLevel Connect
PidFile "{pid_path}"
MaxClients 50
ViaProxyName "tinyproxy"
Allow 127.0.0.1
Allow 0.0.0.0/0
Upstream http {payload.username}:{payload.password}@{payload.ip}:{payload.port}
"""
    cfg_path.write_text(cfg)
    return cfg_path, pid_path


def stop_tinyproxy_on_port(port: int) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç tinyproxy –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ä—Ç—É"""
    if port in active_processes:
        try:
            active_processes[port].terminate()
            active_processes[port].wait(timeout=5)
        except Exception:
            try:
                active_processes[port].kill()
            except Exception:
                pass
        finally:
            del active_processes[port]
    
    # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É–±–∏—Ç—å –ø–æ PID —Ñ–∞–π–ª—É
    pid_path = BASE_DIR / f"tinyproxy_{port}.pid"
    if pid_path.exists():
        try:
            pid = int(pid_path.read_text().strip())
            os.kill(pid, signal.SIGTERM)
        except Exception:
            pass
        finally:
            try:
                pid_path.unlink()
            except Exception:
                pass


def check_proxy_health(port: int, target_ip: str, target_port: int, username: str, password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    import requests
    import time
    
    try:
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã tinyproxy –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        time.sleep(3)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ tinyproxy –∑–∞–ø—É—â–µ–Ω
        if port not in active_processes:
            logger.error(f"‚ùå Tinyproxy –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return False
            
        proc = active_processes[port]
        if proc.poll() is not None:
            logger.error(f"‚ùå Tinyproxy –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π tinyproxy
        proxies = {
            'http': f'http://localhost:{port}',
            'https': f'http://localhost:{port}'
        }
        
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ tinyproxy
        response = requests.get(
            'http://httpbin.org/ip', 
            proxies=proxies, 
            timeout=15,
            headers={'User-Agent': 'TinyProxy-Health-Check/1.0'}
        )
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Tinyproxy –∑–¥–æ—Ä–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Tinyproxy –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Tinyproxy –Ω–µ–∑–¥–æ—Ä–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        return False


def start_tinyproxy_on_port(payload: ApplyPayload) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç tinyproxy –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ä—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è"""
    # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ —ç—Ç–æ–º –ø–æ—Ä—Ç—É
    stop_tinyproxy_on_port(payload.listen_port)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        cfg_path, pid_path = write_config(payload)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        proc = subprocess.Popen(
            ["tinyproxy", "-c", str(cfg_path)], 
            stdout=subprocess.DEVNULL, 
            stderr=subprocess.DEVNULL
        )
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        time.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if proc.poll() is not None:
            logger.error(f"‚ùå Tinyproxy –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {payload.listen_port}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ª–æ–≤–∞—Ä–µ
        active_processes[payload.listen_port] = proc
        pid_path.write_text(str(proc.pid))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–∫—Å–∏
        if check_proxy_health(payload.listen_port, payload.ip, payload.port, payload.username, payload.password):
            logger.info(f"‚úÖ Tinyproxy —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {payload.listen_port}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Tinyproxy –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ–∫—Å–∏ –Ω–µ–∑–¥–æ—Ä–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {payload.listen_port}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ tinyproxy –Ω–∞ –ø–æ—Ä—Ç—É {payload.listen_port}: {e}")
        return False


@APP.post("/apply")
def apply_proxy(payload: ApplyPayload):
    # Ensure tinyproxy is available
    if shutil.which("tinyproxy") is None:
        logger.error("‚ùå tinyproxy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        raise HTTPException(status_code=500, detail="tinyproxy not installed. Install: sudo apt install tinyproxy")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º profile_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    profile_id = payload.profile_id or f"{payload.ip}:{payload.listen_port}"
    
    logger.info("=" * 80)
    logger.info(f"üì• –ó–ê–ü–†–û–° –ù–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï")
    logger.info(f"   –ü—Ä–æ—Ñ–∏–ª—å: {profile_id}")
    logger.info(f"   –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {payload.user_type}")
    logger.info(f"   IP –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {payload.ip}")
    logger.info(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {payload.listen_port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º tinyproxy –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ä—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–¥–æ—Ä–æ–≤—å—è
    success = start_tinyproxy_on_port(payload)
    
    if success:
        logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –ü–û–î–ö–õ–Æ–ß–ï–ù–û")
        logger.info(f"   –ü—Ä–æ—Ñ–∏–ª—å: {profile_id}")
        logger.info(f"   –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {payload.user_type}")
        logger.info(f"   IP –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {payload.ip}")
        logger.info(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {payload.listen_port}")
        logger.info(f"   –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("=" * 80)
        
        return {"ok": True, "listen": payload.listen_port, "profile_id": profile_id}
    else:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
        logger.error(f"   –ü—Ä–æ—Ñ–∏–ª—å: {profile_id}")
        logger.error(f"   IP –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {payload.ip}")
        logger.error(f"   –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {payload.listen_port}")
        logger.error("=" * 80)
        
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {profile_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        )


@APP.post("/clear")
def clear_proxy():
    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ | –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(active_processes)}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    for port in list(active_processes.keys()):
        stop_tinyproxy_on_port(port)
    
    logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—á–∏—â–µ–Ω—ã")
    return {"ok": True}


@APP.post("/clear/{port}")
def clear_proxy_on_port(port: int):
    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–∞ {port}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º tinyproxy –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ—Ä—Ç—É
    stop_tinyproxy_on_port(port)
    
    logger.info(f"‚úÖ –ü–æ—Ä—Ç {port} –æ—á–∏—â–µ–Ω")
    return {"ok": True, "port": port}


@APP.post("/release/{profile_id}")
def release_profile(profile_id: str):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("=" * 80)
    logger.info(f"üö™ –í–´–•–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    logger.info(f"   –ü—Ä–æ—Ñ–∏–ª—å: {profile_id}")
    logger.info("=" * 80)
    
    return {"ok": True, "profile_id": profile_id}


@APP.get("/sessions")
def get_active_sessions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ | –í—Å–µ–≥–æ: {len(active_processes)}")
    return {"processes": list(active_processes.keys())}


# –£–±—Ä–∞–ª–∏ endpoint –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π

# –£–±—Ä–∞–ª–∏ endpoint'—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏


@APP.get("/health")
def health():
    return {"status": "ok"}


@APP.get("/health/{port}")
def check_proxy_health_endpoint(port: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    if port not in active_processes:
        return {"healthy": False, "error": "–ü—Ä–æ–∫—Å–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"}
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        proc = active_processes[port]
        if proc.poll() is not None:
            return {"healthy": False, "error": "–ü—Ä–æ—Ü–µ—Å—Å tinyproxy –∑–∞–≤–µ—Ä—à–∏–ª—Å—è"}
        
        # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∫—Å–∏
        cfg_path = BASE_DIR / f"tinyproxy_{port}.cfg"
        if not cfg_path.exists():
            return {"healthy": False, "error": "–ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è upstream –¥–∞–Ω–Ω—ã—Ö
        config_content = cfg_path.read_text()
        upstream_line = [line for line in config_content.split('\n') if line.startswith('Upstream')]
        
        if not upstream_line:
            return {"healthy": False, "error": "Upstream –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ upstream
        upstream = upstream_line[0].split()[-1]  # http user:pass@ip:port
        upstream_parts = upstream.split('@')
        if len(upstream_parts) != 2:
            return {"healthy": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç upstream"}
        
        auth_part = upstream_parts[0].split('//')[-1]  # user:pass
        target_part = upstream_parts[1]  # ip:port
        
        username, password = auth_part.split(':')
        target_ip, target_port = target_part.split(':')
        target_port = int(target_port)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        is_healthy = check_proxy_health(port, target_ip, target_port, username, password)
        
        return {
            "healthy": is_healthy,
            "port": port,
            "target": f"{target_ip}:{target_port}",
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏ {port}: {e}")
        return {"healthy": False, "error": str(e)}


@APP.get("/status/all")
def get_all_proxy_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
    status = {}
    
    for port, proc in active_processes.items():
        try:
            is_running = proc.poll() is None
            status[port] = {
                "running": is_running,
                "pid": proc.pid if is_running else None,
                "port": port
            }
        except Exception as e:
            status[port] = {
                "running": False,
                "error": str(e),
                "port": port
            }
    
    return {
        "active_proxies": len(active_processes),
        "proxies": status,
        "timestamp": datetime.now().isoformat()
    }


# ==================== ENDPOINTS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–ò–¶–ï–ù–ó–ò–Ø–ú–ò ====================

@APP.get("/license/status")
def get_license_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    logger.info(f"üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ | –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞: {license_status['valid']} | –ö–ª–∏–µ–Ω—Ç: {license_status.get('client_id', 'N/A')}")
    return {
        "license_status": license_status,
        "server_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }


@APP.post("/license/activate")
def activate_license(license_key: str):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é"""
    global license_status
    
    logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ | –ö–ª—é—á: {license_key[:20]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    result = verify_license_key(license_key)
    
    if result["valid"]:
        logger.info(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –≤–∞–ª–∏–¥–Ω–∞ | –ö–ª–∏–µ–Ω—Ç: {result['client_id']} | –î–æ: {result['expire_date']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        if save_license(license_key):
            license_status.update(result)
            logger.info(f"‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê | –ö–ª–∏–µ–Ω—Ç: {result['client_id']} | –î–Ω–µ–π: {result['days_remaining']}")
            return {
                "success": True,
                "message": "–õ–∏—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                "license_status": license_status
            }
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤ —Ñ–∞–π–ª")
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏"
            }
    else:
        logger.warning(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è | –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        return {
            "success": False,
            "message": result.get("error", "–ù–µ–≤–µ—Ä–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"),
            "license_status": result
        }


@APP.post("/license/generate")
def generate_new_license(client_id: str, days: int = 30, admin_key: str = ""):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª—é—á)"""
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ - –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª—é—á
    ADMIN_KEY = "admin_generate_key_2025"
    
    logger.info(f"üîß –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ | –ö–ª–∏–µ–Ω—Ç: {client_id} | –î–Ω–µ–π: {days}")
    
    if admin_key != ADMIN_KEY:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª—é—á –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏")
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª—é—á")
    
    license_key = generate_license_key(client_id, days)
    expire_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d")
    
    logger.info(f"‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ê | –ö–ª–∏–µ–Ω—Ç: {client_id} | –î–æ: {expire_date} | –î–Ω–µ–π: {days}")
    
    return {
        "success": True,
        "client_id": client_id,
        "days": days,
        "license_key": license_key,
        "expire_date": expire_date
    }

# ==================== –ö–û–ù–ï–¶ ENDPOINTS –õ–ò–¶–ï–ù–ó–ò–ô ====================


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(APP, host="127.0.0.1", port=8765)


