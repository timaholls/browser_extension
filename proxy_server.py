#!/usr/bin/env python3
"""
–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 10-15 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import json
import logging
from typing import Dict, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta
import aiohttp
from aiohttp import web, ClientSession, ClientTimeout
import httpx
import uvicorn
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import Response
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import threading
import time
import hashlib
import os
import subprocess
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class ProxyConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞"""
    ip: str
    port: int
    username: str
    password: str
    region: str
    local_port: int
    profile_id: str
    last_used: Optional[datetime] = None
    connection_count: int = 0

class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self):
        self.proxies: Dict[str, ProxyConfig] = {}
        self.active_connections: Dict[str, int] = {}
        self.server_tasks: Dict[str, web.AppRunner] = {}
        self.setup_default_proxies()
    
    def setup_default_proxies(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –≤–∞—à–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        # –°—Ç–∞—Ä—ã–µ –ø—Ä–æ–∫—Å–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        # default_proxies = [
        #     {
        #         "profile_id": "profile1",
        #         "ip": "45.139.125.123",
        #         "port": 1050,
        #         "username": "fOwk1c",
        #         "password": "hBP8MJjtKg",
        #         "region": "–†–æ—Å—Å–∏—è",
        #         "local_port": 3128
        #     },
        #     {
        #         "profile_id": "profile2", 
        #         "ip": "91.188.244.4",
        #         "port": 1050,
        #         "username": "fOwk1c",
        #         "password": "hBP8MJjtKg",
        #         "region": "–†–æ—Å—Å–∏—è",
        #         "local_port": 3129
        #     },
        #     {
        #         "profile_id": "profile3",
        #         "ip": "185.181.245.211", 
        #         "port": 1050,
        #         "username": "fOwk1c",
        #         "password": "hBP8MJjtKg",
        #         "region": "–†–æ—Å—Å–∏—è",
        #         "local_port": 3130
        #     },
        #     {
        #         "profile_id": "profile4",
        #         "ip": "188.130.187.174",
        #         "port": 1050, 
        #         "username": "fOwk1c",
        #         "password": "hBP8MJjtKg",
        #         "region": "–†–æ—Å—Å–∏—è",
        #         "local_port": 3131
        #     }
        # ]
        
        # –ù–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ pool.proxy.market
        default_proxies = [
            {
                "profile_id": "profile1",
                "ip": "pool.proxy.market",
                "port": 10050,
                "username": "JhCkljdaqJvL",
                "password": "57MjVdoa",
                "region": "–†–æ—Å—Å–∏—è",
                "local_port": 3128
            },
            {
                "profile_id": "profile2", 
                "ip": "pool.proxy.market",
                "port": 10050,
                "username": "CRlaRkToaY9J",
                "password": "7mEZj019",
                "region": "–†–æ—Å—Å–∏—è",
                "local_port": 3129
            },
            {
                "profile_id": "profile3",
                "ip": "pool.proxy.market", 
                "port": 10050,
                "username": "qoTweJTfbBF5",
                "password": "qe7C5b1h",
                "region": "–†–æ—Å—Å–∏—è",
                "local_port": 3130
            },
            {
                "profile_id": "profile4",
                "ip": "pool.proxy.market",
                "port": 10050, 
                "username": "d9LfwLJoTpRA",
                "password": "byRTx5tw",
                "region": "–†–æ—Å—Å–∏—è",
                "local_port": 3131
            },
            {
                "profile_id": "profile5",
                "ip": "pool.proxy.market",
                "port": 10050, 
                "username": "Kp8a9dXI5cP4",
                "password": "1AeYMBul",
                "region": "–†–æ—Å—Å–∏—è",
                "local_port": 3132
            }
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏)
        # –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ 5 —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏, –±—É–¥–µ–º –∏—Ö –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        for i in range(6, 16):  # profile6-profile15
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            proxy_index = (i - 6) % 5  # 0-4 –¥–ª—è –Ω–∞—à–∏—Ö 5 –ø—Ä–æ–∫—Å–∏
            working_proxies = [
                {"username": "JhCkljdaqJvL", "password": "57MjVdoa"},
                {"username": "CRlaRkToaY9J", "password": "7mEZj019"},
                {"username": "qoTweJTfbBF5", "password": "qe7C5b1h"},
                {"username": "d9LfwLJoTpRA", "password": "byRTx5tw"},
                {"username": "Kp8a9dXI5cP4", "password": "1AeYMBul"}
            ]
            
            default_proxies.append({
                "profile_id": f"profile{i}",
                "ip": "pool.proxy.market",
                "port": 10050,
                "username": working_proxies[proxy_index]["username"],
                "password": working_proxies[proxy_index]["password"],
                "region": "–†–æ—Å—Å–∏—è",
                "local_port": 3128 + i
            })
        
        for proxy_data in default_proxies:
            self.proxies[proxy_data["profile_id"]] = ProxyConfig(**proxy_data)
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–∫—Å–∏ {proxy_data['profile_id']} –Ω–∞ –ø–æ—Ä—Ç—É {proxy_data['local_port']}")
    
    async def start_proxy_server(self, profile_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_id not in self.proxies:
            logger.error(f"–ü—Ä–æ—Ñ–∏–ª—å {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        proxy_config = self.proxies[profile_id]
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if profile_id in self.server_tasks:
            logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {profile_id}")
            await self.stop_proxy_server(profile_id)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç
        self._kill_port_process(proxy_config.local_port)
        
        try:
            # –°–æ–∑–¥–∞–µ–º HTTP –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
            app = web.Application()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CONNECT –∑–∞–ø—Ä–æ—Å–æ–≤ –ü–ï–†–í–´–ú
            async def connect_handler(request):
                logger.info(f"CONNECT –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
                logger.info(f"CONNECT –∑–∞–≥–æ–ª–æ–≤–∫–∏: {dict(request.headers)}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ URL
                target_host = str(request.url.host)
                target_port = request.url.port or 443
                
                logger.info(f"CONNECT –∫ {target_host}:{target_port}")
                
                # –î–ª—è HTTPS —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
                # –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è HTTPS —Ç—Ä–∞—Ñ–∏–∫–∞
                return web.Response(
                    status=200,
                    text="Connection established",
                    headers={
                        "Connection": "keep-alive",
                        "Proxy-Agent": "ProxyServer/1.0",
                        "Content-Length": "0",
                        "Proxy-Connection": "keep-alive"
                    }
                )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º CONNECT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–ï–†–í–´–ú–ò
            app.router.add_route('CONNECT', '/', connect_handler)
            app.router.add_route('CONNECT', '/{path:.*}', connect_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async def empty_handler(request):
                logger.info(f"–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
                return web.Response(
                    status=200,
                    text="OK",
                    headers={"Content-Length": "0"}
                )
            
            app.router.add_route('*', '/', empty_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            app.router.add_route('*', '/{path:.*}', self.create_proxy_handler(proxy_config))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CONNECT –±–µ–∑ –ø—É—Ç–∏
            async def universal_connect_handler(request):
                logger.info(f"–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CONNECT: {request.method} {request.url}")
                return web.Response(
                    status=200,
                    text="Connection established",
                    headers={
                        "Connection": "keep-alive",
                        "Proxy-Agent": "ProxyServer/1.0",
                        "Content-Length": "0",
                        "Proxy-Connection": "keep-alive"
                    }
                )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π CONNECT –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            app.router.add_route('CONNECT', '*', universal_connect_handler)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            runner = web.AppRunner(app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', proxy_config.local_port)
            await site.start()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.server_tasks[profile_id] = runner
            
            # –ü—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω
            proxy_config.last_used = datetime.now()
            proxy_config.connection_count += 1
            
            logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {profile_id} –Ω–∞ –ø–æ—Ä—Ç—É {proxy_config.local_port}")
            logger.info(f"üîó –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:{proxy_config.local_port}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {profile_id}: {e}")
            return False
    
    def create_proxy_handler(self, proxy_config):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        async def proxy_handler(request):
            try:
                logger.info(f"–ü—Ä–æ–∫—Å–∏ –∑–∞–ø—Ä–æ—Å: {request.method} {request.url}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CONNECT –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è HTTPS
                if request.method == 'CONNECT':
                    logger.info(f"CONNECT –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –¥–ª—è {request.url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
                    if not str(request.url).strip() or str(request.url) == 'http://':
                        logger.warning("–ü—É—Å—Ç–æ–π CONNECT –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK")
                        return web.Response(
                            status=200,
                            text="Connection established",
                            headers={
                                "Connection": "keep-alive",
                                "Proxy-Agent": "ProxyServer/1.0",
                                "Content-Length": "0"
                            }
                        )
                    
                    # –î–ª—è CONNECT –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
                    return web.Response(
                        status=200,
                        text="Connection established",
                        headers={
                            "Connection": "keep-alive",
                            "Proxy-Agent": "ProxyServer/1.0",
                            "Content-Length": "0"
                        }
                    )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
                target_url = str(request.url)
                
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏-–ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if f'localhost:{proxy_config.local_port}/' in target_url:
                    target_url = target_url.split(f'localhost:{proxy_config.local_port}/')[1]
                elif f'127.0.0.1:{proxy_config.local_port}/' in target_url:
                    target_url = target_url.split(f'127.0.0.1:{proxy_config.local_port}/')[1]
                
                # –î–æ–±–∞–≤–ª—è–µ–º http:// –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
                if not target_url.startswith('http://') and not target_url.startswith('https://'):
                    target_url = 'http://' + target_url
                
                logger.info(f"–¶–µ–ª–µ–≤–æ–π URL: {target_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–º–æ–º—É API —Å–µ—Ä–≤–µ—Ä—É
                if '94.241.175.200:8765' in target_url or 'localhost:8765' in target_url:
                    logger.warning("–ó–∞–ø—Ä–æ—Å –∫ API —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏")
                    # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å–µ—Ä–≤–µ—Ä—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏
                    async with httpx.AsyncClient(timeout=30.0) as client:
                        response = await client.request(
                            method=request.method,
                            url=target_url,
                            headers=dict(request.headers),
                            content=await request.read() if request.method in ['POST', 'PUT', 'PATCH'] else None
                        )
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∫—Å–∏
                    proxy_url = f'http://{proxy_config.username}:{proxy_config.password}@{proxy_config.ip}:{proxy_config.port}'
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ Proxy-Authorization (httpx –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
                    headers = dict(request.headers)
                    headers.pop('Proxy-Authorization', None)
                    headers.pop('Proxy-Connection', None)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º retry –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
                    max_retries = 2
                    for attempt in range(max_retries):
                        try:
                            async with httpx.AsyncClient(
                                proxies={
                                    'http://': proxy_url, 
                                    'https://': proxy_url
                                },
                                timeout=60.0,
                                follow_redirects=True,
                                limits=httpx.Limits(max_keepalive_connections=5, max_connections=10)
                            ) as client:
                                
                                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                                response = await client.request(
                                    method=request.method,
                                    url=target_url,
                                    headers=headers,
                                    content=await request.read() if request.method in ['POST', 'PUT', 'PATCH'] else None
                                )
                                
                                # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ retry —Ü–∏–∫–ª–∞
                                break
                                
                        except (httpx.ReadTimeout, httpx.ConnectTimeout) as e:
                            if attempt < max_retries - 1:
                                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º: {e}")
                                await asyncio.sleep(1)
                                continue
                            else:
                                raise
                    
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
                return web.Response(
                    body=response.content,
                    status=response.status_code,
                    headers=dict(response.headers)
                )
                       
            except httpx.ReadTimeout as e:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–∞: {e}")
                return web.Response(
                    text="–ü—Ä–æ–∫—Å–∏ —Ç–∞–π–º–∞—É—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", 
                    status=504,
                    headers={"Retry-After": "5"}
                )
            except httpx.ConnectTimeout as e:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏: {e}")
                return web.Response(
                    text="–ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", 
                    status=503,
                    headers={"Retry-After": "10"}
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–∞: {e}")
                logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
                import traceback
                logger.error(f"Traceback: {traceback.format_exc()}")
                return web.Response(text=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}", status=500)
        
        return proxy_handler
    
    def _encode_auth(self, username: str, password: str) -> str:
        """–ö–æ–¥–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è Basic Auth"""
        import base64
        auth_string = f"{username}:{password}"
        encoded = base64.b64encode(auth_string.encode('utf-8')).decode('utf-8')
        logger.info(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {username}: {encoded}")
        return encoded
    
    async def stop_proxy_server(self, profile_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile_id not in self.proxies:
            return False
        
        proxy_config = self.proxies[profile_id]
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if profile_id in self.server_tasks:
            runner = self.server_tasks[profile_id]
            await runner.cleanup()
            del self.server_tasks[profile_id]
        
        # –ü—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        
        logger.info(f"üõë –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è {profile_id}")
        return True
    
    def _kill_port_process(self, port: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fuser –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–±–∏–π—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
            result = subprocess.run(
                ['fuser', '-k', f'{port}/tcp'],
                capture_output=True,
                text=True,
                timeout=5
            )
            if result.returncode == 0:
                logger.info(f"üî´ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø–æ—Ä—Ç {port}")
            else:
                logger.debug(f"–ü–æ—Ä—Ç {port} —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}: {e}")
    
    def get_profile_by_port(self, port: int) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ø–æ—Ä—Ç—É"""
        for profile_id, config in self.proxies.items():
            if config.local_port == port:
                return profile_id
        return None
    
    def get_proxy_status(self, profile_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏"""
        if profile_id not in self.proxies:
            return {"error": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        config = self.proxies[profile_id]
        return {
            "profile_id": profile_id,
            "local_port": config.local_port,
            "target_ip": config.ip,
            "target_port": config.port,
            "region": config.region,
            "last_used": config.last_used.isoformat() if config.last_used else None,
            "connection_count": config.connection_count
        }
    
    def get_all_proxies_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
        return {
            profile_id: self.get_proxy_status(profile_id)
            for profile_id in self.proxies.keys()
        }
    
    async def check_proxy_health(self, profile_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–∫—Å–∏-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if profile_id not in self.proxies:
            return False
        
        proxy_config = self.proxies[profile_id]
        
        try:
            import requests
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            proxy_url = f'http://{proxy_config.username}:{proxy_config.password}@{proxy_config.ip}:{proxy_config.port}'
            
            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            response = requests.get(
                'http://httpbin.org/ip', 
                proxies={'http': proxy_url, 'https': proxy_url}, 
                timeout=10,
                headers={'User-Agent': 'Proxy-Health-Check/1.0'}
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ –∑–¥–æ—Ä–æ–≤: {profile_id} -> {proxy_config.ip}:{proxy_config.port}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}: {profile_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ–∑–¥–æ—Ä–æ–≤: {profile_id} - {e}")
            return False

class LicenseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    
    def __init__(self):
        self.license_file = "license.key"
    
    def check_license(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏
            if not os.path.exists(self.license_file):
                return {
                    "valid": False,
                    "client_id": None,
                    "expire_date": None,
                    "days_remaining": 0,
                    "error": "–§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            with open(self.license_file, 'r') as f:
                content = f.read().strip()
                if not content:
                    return {
                        "valid": False,
                        "client_id": None,
                        "expire_date": None,
                        "days_remaining": 0,
                        "error": "–§–∞–π–ª –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø—É—Å—Ç–æ–π"
                    }
                
                # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: CLIENT_001:2025-12-23:a4f357e89c932609
                parts = content.split(':')
                if len(parts) != 3:
                    return {
                        "valid": False,
                        "client_id": None,
                        "expire_date": None,
                        "days_remaining": 0,
                        "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏—Ü–µ–Ω–∑–∏–∏"
                    }
                
                license_data = {
                    "client_id": parts[0],
                    "expire_date": parts[1],
                    "hash": parts[2]
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expire_date = datetime.fromisoformat(license_data["expire_date"])
            now = datetime.now()
            
            if now > expire_date:
                license_data["valid"] = False
                license_data["error"] = "–õ–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞"
                license_data["days_remaining"] = 0
            else:
                days_remaining = (expire_date - now).days
                license_data["days_remaining"] = days_remaining
                license_data["valid"] = True
                license_data["error"] = None
            
            return license_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
            return {
                "valid": False,
                "client_id": None,
                "expire_date": None,
                "days_remaining": 0,
                "error": str(e)
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏
proxy_manager = ProxyManager()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π
license_manager = LicenseManager()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Multi-Proxy Server", version="1.0.0")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ProxyRequest(BaseModel):
    profile_id: str
    user_type: str = "user"

class ProxyResponse(BaseModel):
    success: bool
    message: str
    local_port: Optional[int] = None
    profile_id: Optional[str] = None

@app.post("/apply", response_model=ProxyResponse)
async def apply_proxy(request: ProxyRequest):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        license_data = license_manager.check_license()
        if not license_data["valid"]:
            raise HTTPException(status_code=403, detail="–õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
        
        if request.profile_id not in proxy_manager.proxies:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ - –ª—é–±–æ–π –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª—é–±–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é
        config = proxy_manager.proxies[request.profile_id]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä
        success = await proxy_manager.start_proxy_server(request.profile_id)
        
        if success:
            return ProxyResponse(
                success=True,
                message=f"–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è {request.profile_id}",
                local_port=config.local_port,
                profile_id=request.profile_id
            )
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏")
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/release/{profile_id}")
async def release_proxy(profile_id: str):
    """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        success = await proxy_manager.stop_proxy_server(profile_id)
        
        if success:
            return {"success": True, "message": f"–ü—Ä–æ—Ñ–∏–ª—å {profile_id} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"}
        else:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status/{profile_id}")
async def get_proxy_status(profile_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∫—Å–∏"""
    try:
        status = proxy_manager.get_proxy_status(profile_id)
        return status
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/status")
async def get_all_proxies_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
    try:
        return proxy_manager.get_all_proxies_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "total_profiles": len(proxy_manager.proxies),
        "total_proxies": len(proxy_manager.proxies)
    }

@app.get("/health/{profile_id}")
async def check_proxy_health_endpoint(profile_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    try:
        is_healthy = await proxy_manager.check_proxy_health(profile_id)
        return {
            "healthy": is_healthy,
            "profile_id": profile_id,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–∫—Å–∏ {profile_id}: {e}")
        return {"healthy": False, "error": str(e)}

@app.get("/test/{profile_id}")
async def test_proxy_connection(profile_id: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    try:
        if profile_id not in proxy_manager.proxies:
            raise HTTPException(status_code=404, detail="–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        proxy_config = proxy_manager.proxies[profile_id]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        import requests
        proxy_url = f'http://{proxy_config.username}:{proxy_config.password}@{proxy_config.ip}:{proxy_config.port}'
        
        response = requests.get('http://httpbin.org/ip', 
                              proxies={'http': proxy_url, 'https': proxy_url}, 
                              timeout=10)
        
        return {
            "success": response.status_code == 200,
            "status_code": response.status_code,
            "response": response.json() if response.status_code == 200 else None,
            "profile_id": profile_id,
            "proxy": f"{proxy_config.ip}:{proxy_config.port}"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {profile_id}: {e}")
        return {"success": False, "error": str(e)}

@app.get("/license/status")
async def check_license_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        license_data = license_manager.check_license()
        
        logger.info(f"üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏: {license_data}")
        return {"license_status": license_data}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: {e}")
        return {
            "license_status": {
                "valid": False,
                "client_id": None,
                "expire_date": None,
                "days_remaining": 0,
                "error": str(e)
            }
        }

@app.post("/clear/{profile_id}")
async def clear_proxy(profile_id: str):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
    try:
        success = await proxy_manager.stop_proxy_server(profile_id)
        return {"success": success, "message": f"–ü—Ä–æ–∫—Å–∏ {profile_id} –æ—á–∏—â–µ–Ω"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/clear")
async def clear_all_proxies():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
    try:
        for profile_id in proxy_manager.proxies.keys():
            await proxy_manager.stop_proxy_server(profile_id)
        
        return {"success": True, "message": "–í—Å–µ –ø—Ä–æ–∫—Å–∏ –æ—á–∏—â–µ–Ω—ã"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
def run_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(proxy_manager.proxies)} –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8765,
        log_level="info"
    )

if __name__ == "__main__":
    run_server()