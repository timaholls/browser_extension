#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö 5 –ø—Ä–æ–∫—Å–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π IP –∞–¥—Ä–µ—Å–æ–≤
"""

import requests
import time
import json
from typing import Dict, List, Tuple

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
PROXY_CONFIGS = {
    'profile1': {
        'name': 'profile1',
        'squid_port': 3128,
        'expected_ip': '45.139.125.123',
        'upstream_proxy': '45.139.125.123:1050',
        'username': 'fOwk1c',
        'password': 'hBP8MJjtKg'
    },
    'profile2': {
        'name': 'profile2', 
        'squid_port': 3129,
        'expected_ip': '91.188.244.4',
        'upstream_proxy': '91.188.244.4:1050',
        'username': 'fOwk1c',
        'password': 'hBP8MJjtKg'
    },
    'profile3': {
        'name': 'profile3',
        'squid_port': 3130,
        'expected_ip': '185.181.245.211',
        'upstream_proxy': '185.181.245.211:1050',
        'username': 'fOwk1c',
        'password': 'hBP8MJjtKg'
    },
    'profile4': {
        'name': 'profile4',
        'squid_port': 3131,
        'expected_ip': '188.130.187.174',
        'upstream_proxy': '188.130.187.174:1050',
        'username': 'fOwk1c',
        'password': 'hBP8MJjtKg'
    },
    'profile5': {
        'name': 'profile5',
        'squid_port': 3132,
        'expected_ip': '45.140.53.190',
        'upstream_proxy': '45.140.53.190:1050',
        'username': 'fOwk1c',
        'password': 'hBP8MJjtKg'
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
SQUID_SERVER = '94.241.175.200'  # IP –≤–∞—à–µ–≥–æ Squid —Å–µ—Ä–≤–µ—Ä–∞
TEST_URL = 'https://api.ipify.org?format=json'
TIMEOUT = 30

def test_direct_proxy(profile_name: str, config: Dict) -> Tuple[bool, str, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ upstream –ø—Ä–æ–∫—Å–∏
    """
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ {profile_name}...")
    print(f"   Upstream: {config['upstream_proxy']}")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π IP: {config['expected_ip']}")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        proxy_url = f"http://{config['username']}:{config['password']}@{config['upstream_proxy']}"
        proxies = {
            'http': proxy_url,
            'https': proxy_url
        }
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        response = requests.get(
            TEST_URL,
            proxies=proxies,
            timeout=TIMEOUT,
            verify=False
        )
        
        if response.status_code == 200:
            data = response.json()
            actual_ip = data.get('ip', '')
            
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üìç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π IP: {actual_ip}")
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π IP: {config['expected_ip']}")
            
            if actual_ip == config['expected_ip']:
                print(f"   ‚úÖ IP –°–û–í–ü–ê–î–ê–ï–¢!")
                return True, actual_ip, "IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            else:
                print(f"   ‚ùå IP –ù–ï –°–û–í–ü–ê–î–ê–ï–¢!")
                return False, actual_ip, f"IP –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª—Å—è: {config['expected_ip']}, –ø–æ–ª—É—á–µ–Ω: {actual_ip}"
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False, "", f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
            
    except requests.exceptions.ProxyError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, "", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}"
    except requests.exceptions.Timeout as e:
        print(f"   ‚ùå –¢–∞–π–º–∞—É—Ç: {e}")
        return False, "", f"–¢–∞–π–º–∞—É—Ç: {e}"
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False, "", f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, "", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

def test_squid_proxy(profile_name: str, config: Dict) -> Tuple[bool, str, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Squid –ø—Ä–æ–∫—Å–∏
    """
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Squid –¥–ª—è {profile_name}...")
    print(f"   Squid –ø–æ—Ä—Ç: {config['squid_port']}")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π IP: {config['expected_ip']}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Squid –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        squid_proxy = f"http://{SQUID_SERVER}:{config['squid_port']}"
        proxies = {
            'http': squid_proxy,
            'https': squid_proxy
        }
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Squid
        response = requests.get(
            TEST_URL,
            proxies=proxies,
            timeout=TIMEOUT,
            verify=False
        )
        
        if response.status_code == 200:
            data = response.json()
            actual_ip = data.get('ip', '')
            
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   üìç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π IP: {actual_ip}")
            print(f"   üéØ –û–∂–∏–¥–∞–µ–º—ã–π IP: {config['expected_ip']}")
            
            if actual_ip == config['expected_ip']:
                print(f"   ‚úÖ IP –°–û–í–ü–ê–î–ê–ï–¢!")
                return True, actual_ip, "IP —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            else:
                print(f"   ‚ùå IP –ù–ï –°–û–í–ü–ê–î–ê–ï–¢!")
                return False, actual_ip, f"IP –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª—Å—è: {config['expected_ip']}, –ø–æ–ª—É—á–µ–Ω: {actual_ip}"
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False, "", f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
            
    except requests.exceptions.ProxyError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, "", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}"
    except requests.exceptions.Timeout as e:
        print(f"   ‚ùå –¢–∞–π–º–∞—É—Ç: {e}")
        return False, "", f"–¢–∞–π–º–∞—É—Ç: {e}"
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False, "", f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, "", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

def test_without_proxy() -> Tuple[bool, str]:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    """
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
    
    try:
        response = requests.get(TEST_URL, timeout=TIMEOUT, verify=False)
        
        if response.status_code == 200:
            data = response.json()
            actual_ip = data.get('ip', '')
            print(f"   ‚úÖ –ü—Ä—è–º–æ–π IP: {actual_ip}")
            return True, actual_ip
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False, ""
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False, ""

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("=" * 80)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ö–°–ò –°–ï–†–í–ï–†–û–í")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
    direct_success, direct_ip = test_without_proxy()
    print(f"\nüìç –ü—Ä—è–º–æ–π IP —Å–µ—Ä–≤–µ—Ä–∞: {direct_ip}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results = {
        'direct_proxy': {},
        'squid_proxy': {}
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    for profile_name, config in PROXY_CONFIGS.items():
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {profile_name.upper()}")
        print(f"{'='*60}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ upstream –ø—Ä–æ–∫—Å–∏
        success, ip, message = test_direct_proxy(profile_name, config)
        results['direct_proxy'][profile_name] = {
            'success': success,
            'ip': ip,
            'message': message,
            'expected_ip': config['expected_ip']
        }
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(2)
        
        # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Squid
        success, ip, message = test_squid_proxy(profile_name, config)
        results['squid_proxy'][profile_name] = {
            'success': success,
            'ip': ip,
            'message': message,
            'expected_ip': config['expected_ip']
        }
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        time.sleep(3)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print(f"{'='*80}")
    
    print(f"\nüîó –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü –ö UPSTREAM –ü–†–û–ö–°–ò:")
    for profile_name, result in results['direct_proxy'].items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"   {status} {profile_name}: {result['ip']} (–æ–∂–∏–¥–∞–ª—Å—è: {result['expected_ip']})")
        if not result['success']:
            print(f"      ‚ùå {result['message']}")
    
    print(f"\nüåê –î–û–°–¢–£–ü –ß–ï–†–ï–ó SQUID:")
    for profile_name, result in results['squid_proxy'].items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"   {status} {profile_name}: {result['ip']} (–æ–∂–∏–¥–∞–ª—Å—è: {result['expected_ip']})")
        if not result['success']:
            print(f"      ‚ùå {result['message']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    direct_success_count = sum(1 for r in results['direct_proxy'].values() if r['success'])
    squid_success_count = sum(1 for r in results['squid_proxy'].values() if r['success'])
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø: {direct_success_count}/5 —É—Å–ø–µ—à–Ω–æ")
    print(f"   Squid –¥–æ—Å—Ç—É–ø: {squid_success_count}/5 —É—Å–ø–µ—à–Ω–æ")
    
    if direct_success_count == 5 and squid_success_count == 5:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    elif direct_success_count == 5:
        print(f"\n‚ö†Ô∏è  Upstream –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Squid")
    elif squid_success_count == 5:
        print(f"\n‚ö†Ô∏è  Squid —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å upstream –ø—Ä–æ–∫—Å–∏")
    else:
        print(f"\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–û–ö–°–ò –°–ï–†–í–ï–†–ê–ú–ò")
    
    print(f"\n{'='*80}")

if __name__ == "__main__":
    main()
